****************Este documento contiene la estructura utilizada en el sistema Plantanova.

Nombres archivos en general:Todos los archivos se nombran usando solamente minúsculas para evitar problemas con el servidor.
Nombres controladores: Todos los controladores se nombran con palabras simples y descriptivas ya que este nombre aparece en la URL.
Nombres modelos: Todos los modelos se nombran con el estándar: model_nombre.php(nombre debe ser descriptivo a las funciones que realiza el modelo).
Nombres vistas: Toda las vistas se nombran de la siguiente forma:
	-view_[rol_][nombre_](header|body|footer).php
	-los elementos dentro de [] son opcionales, el rol puede ser admin, el nombre puede referirse a la funcion que realiza como ordenes o login.
	-los elementos dentro de () significa que debe ir uno de los tres indicando que parte es y en que carpeta está.
Nombres funciones controladores: Las funciones se nombran en minúsculas y usan nombres descriptivos a su funcionalidad, si tienen dos o más palabras se separan por '_'.
Nombres funciones modelos: Las funciones se nombran de la siguiente forma:
	-Obtener datos:
		-get_(nombre de lo que obtiene)_[by_parameter]
		-ejemplo de [by_parameter]: get_user_by_id.
	-Insertar datos:
		-insert_(nombre de lo que inserta eg. user,order,etc.). 
	-Cambiar datos:
		-update_(nombre de lo que actualiza).

****************Estructura de documentos(Codeigniter 2.1.4):****************
	-plantanova/application/controllers/: Contiene los controladores del sistema, es decir, los archivos que manejan la interaccion de vistas con base de datos.
	-plantanova/application/models/: Contiene los modelos del sistema, es decir, los archivos que manejan la interaccion con la base de datos.
	-plantanova/applicacion/views/: Contiene las carpetas para vistas.
		-../main.php: Es el archivo a través del cual se cargan las vistas para mantener una estructura flexible, es decir se le manda el nombre del header,body y 				footer desde el controlador y este archivo los carga por separado, de igual forma aqui se checan los permisos de acuerdo al rol.
		-../header/: Contiene las vistas de encabezados del sistema.
		-../body/: Contiene las vistas del cuerpo de página del sistema.
		-../footer/: Contiene los pies de página del sistema.
		-../extra/: Contiene vistas extras como tablas o cosas genéricas(en especial para uso de AJAX).
	-plantanova/css/css/: Contiene todos los archivos de estilo del sistema.
	-plantanova/css/fonts/: Contiene todos los archivos de fuentes que utiliza el sistema.
	-plantanova/css/js/: Contiene todos los archivos javascript que utiliza el sistema.
	-plantanova/img/: Contiene las imagenes utilizadas a lo largo del sistema(logos, etc.).
Plugins utilizados: 
	-plantanova/application/libraries/PasswordHash.php: Es un archivo que contiene una forma de encriptar y desencriptar de forma segura las contraseñas para más 			información http://www.openwall.com/phpass/
	-plantanova/css/js/jquery.dataTables.min.js: plugin de javascript para cambiar las tablas a datatables y tener barra de búsqueda y ordenado de columnas.
	-plantanova/css/js/TableTools.js: Agregue la funcionalidad de botones para exportar datos de tablas a Excel, PDF o impresión, requiere de plantanova/css/js/		ZeroClipboard.js y también requiere la carpeta plantanova/media/swf pues son los modelos que toma para exportar a Excel y PDF.
	-plantanova/css/js/custom.js: Contine funciones que utilizamos para hacer llamadas AJAX o la configuracion del DataTable.

****************Manejo del Repositorio:****************
	-Branches:
		-Irving : Era el branch en el que yo trabajaba para despues unirlo a master.
		-master : Es el branch principal, no se deberia de trabajar sobre el, mas bien solo unirle las partes que esten terminadas en otros branches.
		-Viejo : Contiene la propuesta pasada, solo esta ahi a manera de información por si se requiere reutilizar alguna funcionalidad pero no se trabaja ahi.
	-Comandos : 
		-git checkout -b <new branch> origin/<new branch to follow>
		-git pull origin <branch to pull> : Baja <branch to pull> al branch actual local.
		-git push origin <branch to update> : Sube el branch local(origin) a <branch to update>.
		-git branch -a : Muestra todos los branches locales y remotos.
		-git checkout <move to this branch> : Se cambia de branch.
		-git fetch : Trae los datos del repositorio pero no junta nada solo te enteras.
		-http://rogerdudler.github.io/git-guide/index.es.html
		-Manuales de muchos lenguajes : http://www.stumbleupon.com/su/ALg3NT/overapi.com/
		-Manual de Bootstrap 3 : http://www.tutorialrepublic.com/twitter-bootstrap-tutorial/
		-Tutoriales CSS3 : http://www.desarrolloweb.com/manuales/css3.html

Tutorial de bootstrap
http://www.tutorialrepublic.com/twitter-bootstrap-tutorial/

